[ { "title": "binlog와 mysqlbinlog", "url": "/posts/mysqlbinlog/", "categories": "DB, Mysql", "tags": "DB, Mysql", "date": "2021-04-29 12:00:00 +0900", "snippet": "BinlogBinlog란? binlog는 DML(update, insert, delete) 실행시 시간과 함께 기록되는 로그이다. 데이터 복구와 Replication에 사용된다.Binlog를 활성화하기 위한 옵션들 my.cnf에 아래 옵션들을 넣어준다. log-bin=[binlog가 저장될 디렉토리와 파일명] binlog_format=[ROW, MIXED, STATEMENT] (참고) ROW 변경된 행 자체를 BASE64로..." }, { "title": "Innodb Storage Engine과 lock에 대한 연구", "url": "/posts/mysql-record-lock/", "categories": "DB, Mysql", "tags": "DB, Mysql", "date": "2021-03-14 23:00:00 +0900", "snippet": "서론Innodb Storage Engine은 Row Level Locking이라는 특별한 개념을 가지고 있다. 이 Record Lock이라는 개념을 가지면서 Table Level Lock만을 가진 MyIsam 엔진보다 Lock이 걸리는 범위가 좁아졌기 때문에 다량의 CRUD 작업이 일어나는 App에서는 Innodb엔진을 많이 사용하고 있다. 하지만 실제로 lock이 걸렸을 때에만 Innodb Lock Monitor에 표시되기 때문에 디버깅이 어렵다. 이 포스트에서는 Row Level Lock의 종류에 대해서 공부한 부분을 정리..." }, { "title": "Mysql 서버 설정", "url": "/posts/mysql/", "categories": "DB, Mysql", "tags": "DB, Mysql", "date": "2020-11-14 23:00:00 +0900", "snippet": "Mysql 서버는 단 1개의 설정 파일만 사용한다. unix계열: my.cnf window계열: my.ini이 파일의 이름은 변경이 불가능하며, Mysql 서버는 시작할 때 이 설정 파일을 참조하여 처음 발견된 설정 파일로 구동된다.my.cnf 파일의 탐색 순서이 순서는 mysql을 직접 컴파일해서 설치한 경우에는 순서가 다를 수 있다.만약 my.cnf 파일의 작동 순서가 궁금하다면 mysql --help 명령어의 Default option are read… 부분에서 확인 할 수 있다.위 스크린샷에서는 아래와 같은 순서로 ..." }, { "title": "Method Receiver에서 Pointer를 언제 붙여야 할까?", "url": "/posts/golang-pointer/", "categories": "Programming, Go", "tags": "Go", "date": "2020-11-06 10:33:00 +0900", "snippet": "개요go 언어로 개발을 하다 보면 Method Receiver에 언제 포인터를 붙이고, 붙이지 말아야할지 헷갈릴 때가 있다. 한번 정리할 필요성을 느껴서 글로 정리해본다. 먼저 문제를 풀어보며 설명을 이어나가도록 하겠다.Method Receiver에 포인터가 꼭 필요한 곳은?문제: age를 변수로 가지고 있는 Person이라는 구조체가 있다. 또한 이 구조체는 age의 setter, getter인 setAge, getAge Method Receiver를 가지고 있다. 이 때 setter, getter중 꼭 포인터를 붙여야하는 ..." }, { "title": "Kubernetes Custom Controller Workqueue", "url": "/posts/custom-controller-workqueue/", "categories": "Kubernetes", "tags": "Go, Kubernetes, client-go, controller", "date": "2020-11-04 19:00:00 +0900", "snippet": "Workqueue란 Custom Controller에서 Object의 전달을 분리하기 위해서 만들어 놓은 큐 Workqueue에서 Key를 통해 Object를 가져와 순차적으로 Handle하게 된다. Workqueue는 EventHandler로 등록(AddFunc, UpdateFunc, DeleteFunc)한 객체에 대해서 동작한다.Workqueue의 Interface Add(item interface{}) Len() int Get() (item interface{}, shutdown bool) Done(item ..." }, { "title": "고루틴 누수 방지", "url": "/posts/post2/", "categories": "Programming, Go", "tags": "Go, Programming", "date": "2020-10-31 18:25:00 +0900", "snippet": "개요고루틴을 사용하면서 데드락을 경험하거나, 어떻게 다른 채널을 종료시킬지 고민할 때가 있다. 지금 소개하는 패턴을 사용하게 되면, 부모 고루틴과 자식 고루틴 사이에 어떻게 close 신호를 전달할지 이해할 수 있다.문제 발생 고루틴들은 런타임에 의해 가비지 컬렉션되지 않으므로 Memory Leak이 발생할 가능성이 있다. 메모리상에서 고루틴들이 종료되게 제어할 수 있는 방법이 필요하다. 그렇다면, 부모 고루틴들이 자식 고루틴들을 종료할 수 있게 만들어 주면 된다. 읽기 채널의 고루틴 제어변경 전f..." } ]
